Creational Patterns:
    1. Factory
        -- usefull when we want to "externalize object creation."
        -- create a factory class which contains a method which returns the given object.
        -- eg. Cars: ford-fusion, chevy-volt, jeep-sahara. Create a factory which will return objects of these classes based on the enum or name provided.
    2. Abstract Factory
        -- usefull when there is a family of classes we want to instantiate.
        -- create an abstract factory class which will be inherited by different individual factories and implement their own implementations.
        -- eg. different types of cars: economy, sport, luxury etc. Create an abstract factory which will have methods to create economy, sport and luxury cars. Different manufacturers like Ford, and GM will implement their own implementations of these methods. Eg. Ford will return fusion for their economy method, and GM will return something else. 
    3. Builder
        -- useful when the object needs multiple parameters for its creation.
        -- also useful when we want to force a specific order while creating the object.
        -- eg. JIRA utility class
        -- eg. Computer class: create a builder which will take the inputs from user and create the object in a desired order and then return the object.